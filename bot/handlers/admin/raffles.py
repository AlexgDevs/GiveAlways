from datetime import datetime

from sqlalchemy import select
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from aiogram.types import (
    message,
    Message,
    ReplyKeyboardRemove
)

from ...keyboards.reply import admin_main_menu
from ...database import (Session,
                        User,
                        Giveaway)

# raffles_menu.button(text='üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å')
# raffles_menu.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å')
# raffles_menu.button(text='üìã –°–ø–∏—Å–æ–∫')
# raffles_menu.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')




from ...utils.states import AdminState

admin_router_raffles = Router()


@admin_router_raffles.message(F.text=='‚ûï –°–æ–∑–¥–∞—Ç—å', AdminState.admin_actions)
async def set_title(message: Message, state: FSMContext):

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç–µ', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminState.raffles_title)

@admin_router_raffles.message(F.text, AdminState.raffles_title)
async def get_title_and_set_description(message: Message, state: FSMContext):

    title = message.text
    if len(title) >= 256:
        await message.answer('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤!')
        return
    
    await state.update_data(title=title)
    await message.answer('–í–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç–µ')
    await state.set_state(AdminState.raffles_description)


@admin_router_raffles.message(F.text, AdminState.raffles_description)
async def get_description_and_get_photo(message: Message, state: FSMContext):
    
    description = message.text
    if len(description) >= 896:
        await message.answer('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤!')
        return
    
    await state.update_data(description=description)
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞')
    await state.set_state(AdminState.raffles_photo)

@admin_router_raffles.message(F.photo, AdminState.raffles_photo)
async def get_photo_and_set_end_data(message: Message, state: FSMContext):

    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)

    await message.answer('–ù–ø–∏—à–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
    await state.set_state(AdminState.raffles_end_date)


@admin_router_raffles.message(F.text, AdminState.raffles_end_date)
async def progress_end_data_and_add_to_db(message: Message, state: FSMContext):
    try:
        end_data_str = message.text.strip()
        date_format = "%d.%m.%Y"
        end_data = datetime.strptime(end_data_str, date_format)

        if end_data <= datetime.now():
            await message.answer('–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!')
            return
        
        await message.answer(f'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_data}.')


        user_id = message.from_user.id
        state_data = await state.get_data()
        title = state_data.get('title')
        description = state_data.get('description')
        photo = state_data.get('photo')

        with Session.begin() as session:
            try:
                user = session.get(User, user_id)
                if user:
                    new_giveaway = Giveaway(

                        title=title,
                        description=description,
                        photo=photo,
                        end_data=end_data,
                        creator_id=user_id
                    )

                    session.add(new_giveaway)
                    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à!', reply_markup=admin_main_menu)
                    await state.clear()
                    await state.set_state(AdminState.admin_actions)
            
            except Exception as e:
                await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à! - {e}', reply_markup=admin_main_menu)
                await state.clear()
                await state.set_state(AdminState.admin_actions)
                

    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
        return
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}') 
        return


